<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <meta name="description" content="" />
    <meta name="author" content="" />

    <title>Login</title>

    <!-- Custom fonts for this template-->
    <link href="/vendor/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css">
    <link
        href="https://fonts.googleapis.com/css?family=Nunito:200,200i,300,300i,400,400i,600,600i,700,700i,800,800i,900,900i"
        rel="stylesheet">

    <!-- Custom styles for this template-->
    <link href="/stylesheets/sb-admin-2.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>

<body class="bg-gradient-primary">
    <div class="container">
        <!-- Outer Row -->
        <div class="row justify-content-center">
            <div class="col-xl-10 col-lg-12 col-md-9">
                <div class="card o-hidden border-0 shadow-lg my-5">
                    <div class="card-body p-0">
                        <!-- Nested Row within Card Body -->
                        <div class="row">
                            <div class="col-lg-6 d-none d-lg-block bg-login-image"></div>
                            <div class="col-lg-6">
                                <div class="p-5">
                                    <div class="text-center">
                                        <h1 class="h4 text-gray-900 mb-4">Welcome Back!</h1>
                                    </div>

                                    <!-- FORM LOGIN -->
                                    <form class="user" method="POST" action="/login">
                                        <div class="form-group">
                                            <input type="email" name="email" class="form-control form-control-user"
                                                id="exampleInputEmail" aria-describedby="emailHelp"
                                                placeholder="Enter Email Address..." required />
                                        </div>
                                        <div class="form-group">
                                            <input type="password" name="password"
                                                class="form-control form-control-user" id="exampleInputPassword"
                                                placeholder="Password" required />
                                        </div>
                                        <div class="form-group">
                                            <div class="custom-control custom-checkbox small">
                                                <input type="checkbox" class="custom-control-input" id="customCheck"
                                                    name="remember" />
                                                <label class="custom-control-label" for="customCheck">Remember
                                                    Me</label>
                                            </div>
                                        </div>
                                        <button type="submit" class="btn btn-primary btn-user btn-block">
                                            Login
                                        </button>
                                    </form>

                                    <% if (messages?.error?.length) { %>
                                    <script>
                                        document.addEventListener('DOMContentLoaded', function () {
                                            Swal.fire({
                                                icon: 'error',
                                                title: 'Oops...',
                                                text: '<%= messages.error[0] %>',
                                                confirmButtonColor: '#e74a3b',
                                                confirmButtonText: 'OK',
                                                allowOutsideClick: true,
                                                allowEscapeKey: true
                                            });
                                        });
                                    </script>
                                    <% } %>
                                    <% if (messages?.success?.length) { %>
                                    <script>
                                        document.addEventListener('DOMContentLoaded', function () {
                                            Swal.fire({
                                                icon: 'success',
                                                title: 'Berhasil!',
                                                text: '<%= messages.success[0] %>',
                                                confirmButtonColor: '#1cc88a',
                                                confirmButtonText: 'OK',
                                                allowOutsideClick: true,
                                                allowEscapeKey: true
                                            });
                                        });
                                    </script>
                                    <% } %>

                                    <div class="text-center">
                                        <a class="small" href="/forgot-password">Forgot Password?</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <%- include('../partials/scripts') %>
</body>

</html>

const express = require('express');
const { checkLogin, generateInvoice, formatCurrency } = require('../helpers/utils');
const router = express.Router();
const { Purchase, Purchaseitem, Supplier, User, Goods } = require('../models');
const moment = require('moment');

module.exports = function (db) {
  router.get('/', checkLogin, async function (req, res) {
    try {
      const purchases = await Purchase.findAll({
        include: [
          {
            model: Supplier
          }
        ]
      });

      res.render('purchases/list', {
        user: req.session.user,
        purchases,
        moment,
        formatCurrency,
        title: 'Purchases',
        messages: req.flash()
      });
    } catch (error) {
      console.log(error);
    }
  });

  router.get('/add', checkLogin, async function (req, res) {
    try {
      const suppliers = await Supplier.findAll();
      const goods = await Goods.findAll();
      const now = moment();
      const currentDateTime = now.format('DD MMM YYYY HH:mm:ss');
      const invoice = await generateInvoice(Purchase.sequelize);
      
      res.render('purchases/form', {
        user: req.session.user,
        purchase: { invoice },
        currentDateTime,
        goods,
        suppliers,
        formatCurrency,
        title: 'Add Purchase',
        messages: req.flash()
      });
    } catch (error) {
      console.log(error);
    }
  });

  // Create new purchase
  router.post('/add', checkLogin, async function (req, res) {
    try {
      const { supplier, items, invoice } = req.body;
      
      if (!items || !Array.isArray(items) || items.length === 0) {
        return res.status(400).json({ error: 'Minimal 1 item harus diisi.' });
      }
      
      const operator = req.session.user && req.session.user.userid;
      let totalsum = 0;
      const purchaseItems = items.map(item => {
        const quantity = parseInt(item.quantity);
        const purchaseprice = parseFloat(item.purchaseprice);
        const totalprice = purchaseprice * quantity;
        totalsum += totalprice;
        return {
          invoice,
          itemcode: item.itemcode,
          quantity,
          purchaseprice,
          totalprice
        };
      });

      await Purchase.create({
        invoice,
        supplier,
        operator,
        totalsum,
        time: new Date()
      });

      await Purchaseitem.bulkCreate(purchaseItems);

      req.flash('success', 'Purchase berhasil disimpan');
      res.status(201).json({ success: true, invoice });
    } catch (error) {
      console.log(error);
      res.status(400).json({ error: error.message });
    }
  });

  router.get('/edit/:invoice', checkLogin, async function (req, res) {
    try {
      const purchase = await Purchase.findOne({
        where: { invoice: req.params.invoice },
        include: [
          {
            model: User,
            as: 'operatorUser',
            attributes: ['id', 'name', 'email']
          },
          {
            model: Purchaseitem,
            include: [
              {
                model: Goods,
                attributes: ['name']
              }
            ]
          }
        ]
      });

      const suppliers = await Supplier.findAll();
      const goods = await Goods.findAll();

      const now = moment();
      const currentDateTime = now.format('DD MMM YYYY HH:mm:ss');

      res.render('purchases/form', { 
        user: req.session.user, 
        purchase, 
        currentDateTime, 
        goods, 
        suppliers,
        formatCurrency,
        title: 'Edit Purchase',
        messages: req.flash()
      });
    } catch (error) {
      console.log(error);
    }
  });

  router.post('/edit/:invoice/item', checkLogin, async function (req, res) {
    const { invoice } = req.params;
    const { itemcode, quantity, purchaseprice, totalprice } = req.body;

    try {
      // Check if purchase exists first
      const purchase = await Purchase.findOne({ where: { invoice } });
      if (!purchase) {
        return res.status(404).json({ error: 'Purchase tidak ditemukan' });
      }

      const purchaseItem = await Purchaseitem.create({ 
        invoice, 
        itemcode, 
        quantity, 
        purchaseprice, 
        totalprice 
      });
      
      const item = await Purchaseitem.findOne({
        where: { id: purchaseItem.id },
        include: [{
          model: Goods,
          attributes: ['stock']
        }]
      });
      
      res.status(201).json({ purchase, item });
    } catch (error) {
      console.log(error);
      res.status(400).json({ error: error.message });
    }
  });

  router.post('/edit/:invoice', checkLogin, async function (req, res) {
    const { invoice } = req.params;
    const { time, supplier, totalsum } = req.body;

    try {
      const item = await Purchase.update(
        { time, supplier, totalsum },
        { where: { invoice } }
      );
      res.status(201).json(item);
    } catch (error) {
      console.log(error);
      res.status(400).json({ error: error.message });
    }
  });

  // Delete purchase
  router.post('/delete/:invoice', checkLogin, async (req, res) => {
    const { invoice } = req.params;

    try {
      // Delete items first (due to foreign key constraints)
      await Purchaseitem.destroy({ where: { invoice } });
      
      // Then delete purchase
      await Purchase.destroy({ where: { invoice } });
      
      res.redirect('/purchases');
    } catch (error) {
      console.log(error);
      res.status(500).send('Gagal menghapus purchase');
    }
  });

  router.post('/delete/:id/item', checkLogin, async (req, res) => {
    const { id } = req.params;

    try {
      await Purchaseitem.destroy({ where: { id } });
      res.redirect('back');
    } catch (error) {
      console.log(error);
      res.status(500).send('Gagal menghapus item');
    }
  });

  return router;
}