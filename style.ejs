class SidebarNavigator {
  constructor() {
      this.isNavigating = false;
      this.cache = new Map();
      this.currentPath = window.location.pathname;
      this.init();
  }

  init() {
      this.bindNavigationLinks();
      this.handlePopState();
      this.updateActiveState();
  }

  bindNavigationLinks() {
      document.querySelectorAll('.nav-link, .collapse-item').forEach(link => {
          if (this.shouldIntercept(link)) {
              link.addEventListener('click', (e) => this.handleNavigation(e, link));
          }
      });
  }

  shouldIntercept(link) {
      const href = link.getAttribute('href');
      return href && href.startsWith('/') && !href.includes('#') && !link.hasAttribute('data-toggle') && !link.classList.contains('sidebar-brand');
  }

  async handleNavigation(e, link) {
      if (e.ctrlKey || e.metaKey || e.altKey || e.shiftKey) return;
      e.preventDefault();
      if (this.isNavigating) return;

      const href = link.getAttribute('href');
      this.isNavigating = true;

      try {
          const content = await this.fetchContent(href);
          if (content) {
              this.updateContent(content);
              this.updateHistory(href);
              this.updateActiveState();
              this.reinitializeComponents();
              this.scrollToTop();
          } else {
              window.location.href = href; // fallback only if AJAX fails
          }
      } catch (error) {
          window.location.href = href;
      } finally {
          this.isNavigating = false;
      }
  }

  async fetchContent(url) {
      try {
          const response = await fetch(url, {
              headers: { 'X-Requested-With': 'XMLHttpRequest', 'Accept': 'text/html' }
          });
          if (!response.ok) throw new Error(`HTTP ${response.status}`);
          const html = await response.text();
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');
          const mainContent = doc.querySelector('#content');
          return mainContent ? mainContent.innerHTML : null;
      } catch {
          return null;
      }
  }

  updateContent(content) {
      const mainContent = document.querySelector('#content');
      if (mainContent) {
          mainContent.innerHTML = content;
          // Eksekusi semua script inline di mainContent
          mainContent.querySelectorAll('script').forEach(script => {
              if (script.textContent && script.textContent.trim()) {
                  try {
                      eval(script.textContent);
                  } catch (e) {
                      console.error('Script eval error:', e);
                  }
              }
          });
      }
  }

  updateHistory(url) {
      this.currentPath = url;
      window.history.pushState({ url }, '', url);
  }

  handlePopState() {
      window.addEventListener('popstate', (e) => {
          if (e.state && e.state.url) {
              this.handleNavigation({ preventDefault: () => { } }, { getAttribute: () => e.state.url });
          }
      });
  }

  updateActiveState() {
      const path = this.currentPath || window.location.pathname;

      // Remove all active states
      this.clearActiveStates();

      // Set active states based on current path
      this.setActiveState(path);

      // Handle collapse state for goods utilities
      this.handleCollapseState(path);
  }

  clearActiveStates() {
      document.querySelectorAll('.nav-item.active, .collapse-item.active').forEach(el => {
          el.classList.remove('active');
      });
  }

  setActiveState(path) {
      const navMap = {
          '/dashboard': 'dashboard',
          '/goods': 'goods',
          '/units': 'units',
          '/suppliers': 'suppliers',
          '/customers': 'customers',
          '/users': 'users',
          '/purchases': 'purchases',
          '/sales': 'sales'
      };

      // Find matching nav item
      for (const [route, navKey] of Object.entries(navMap)) {
          if (path.startsWith(route)) {
              const navItem = document.querySelector(`[data-nav="${navKey}"]`);
              if (navItem) {
                  navItem.classList.add('active');
              }

              // Handle collapse items
              if (navKey === 'goods' || navKey === 'units') {
                  const collapseItem = document.querySelector(`[data-nav="${navKey}"]`);
                  if (collapseItem) {
                      collapseItem.classList.add('active');
                  }
              }
              break;
          }
      }
  }

  handleCollapseState(path) {
      // Pastikan collapse dibuka jika path goods/units
      if (path.startsWith('/goods') || path.startsWith('/units')) {
          const collapseGoods = document.querySelector('#collapseGoods');
          if (collapseGoods && !collapseGoods.classList.contains('show')) {
              collapseGoods.classList.add('show');
          }
      }
  }

  handleCollapse(e, toggle) {
      // Let Bootstrap handle the collapse animation
      // We just need to ensure proper state management
      const targetId = toggle.getAttribute('data-target');
      const target = document.querySelector(targetId);

      if (target) {
          const isExpanded = toggle.getAttribute('aria-expanded') === 'true';
          toggle.setAttribute('aria-expanded', !isExpanded);
          toggle.classList.toggle('collapsed', isExpanded);
      }
  }

  reinitializeComponents() {
      // Inisialisasi DataTables pada tabel sales
      if (typeof initDataTable === 'function') {
          initDataTable();
      }
      if (typeof initDashboardCharts === 'function') initDashboardCharts();
      if (typeof initDashboardChartsPie === 'function') initDashboardChartsPie();
      if (typeof $ !== 'undefined') {
          $('[data-toggle="tooltip"]').tooltip();
          $('[data-toggle="popover"]').popover();
      }
  }

  scrollToTop() {
      window.scrollTo({ top: 0, behavior: 'smooth' });
  }
}
// Initialize the navigator
const sidebarNavigator = new SidebarNavigator();
// Legacy function for backward compatibility
function updateSidebarActive() {
  sidebarNavigator.updateActiveState();
}

